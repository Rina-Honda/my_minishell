◎大枠の流れ
○readlineループ
ターミナルからの入力を受け付ける
入力をコマンドとして実行し終わったら、また次の入力を受け付ける
===============================
readlineの入力後

○tokenize
空白区切りの単語でリスト(t_token型)をつくる
クオテーション内は一個のtokenとして扱う
ls -al | echo $USER "$USER" '$USER
→ ls, -al, |, echo, $USER, "$USER", '$USER'のリスト

○parse
構文解析
パイプとリダイレクト中心にどこまで1個のコマンドか解釈
(t_command = t_node)をつくる
私のコードだと、パイプの縦線を1個のnodeとして扱っている
node1.arg = ls, -al
node2.arg = |
node3.arg = echo, $USER, "$USER", '$USER'

○expand
やることは2つ
・$USERなど環境変数を値に変換する
・クオテーションを取り除く
※ダブルクオテーション内の$USERは値に変換するが、シングルクオテーション内の$USERは値に変換せず文字列として残す
・環境変数変換後
node1.args = ls, -al
node2.args = |
node3.args = echo, rhonda, "rhonda", '$USER'
・クオテーション取り除き後
node1.args = ls, -al
node2.args = |
node3.args = echo, rhonda, rhonda, $USER

○exec
1コマンドごとに1つの子プロセスを作成(fork)して実行
メインの親プロセスは子プロセスの終了を待つ(wait)
すべての子プロセスが終わったらmain関数のreadlineループに戻る
redirect, pipe, fork, exec, wait, redirectの復元 の順に行う？

=============================
○その他のテーマ
・signal
・heredoc
・builtin関数
・environとその管理に使っているmap
・$?(終了ステータス)

============================
○コード特記事項
・関数名がxx_recursive
　再帰にすることでwhileループが一つ減り、行数削減できるそう

=============================
○signal
対応するシグナル3つ
Ctrl + C : グローバル変数g_sigで管理
Ctrl + D : main関数とheredocそれぞれのreadlineループで対応?
Ctrl + \ : なにもしない

○heredoc
リダイレクトのひとつ。ヒアドキュメント。
複数行を受け取ってくれる。
<< の後に続くtokenが入力終了を示す単語(= delimiter)となる。
入力がdelimiterと完全一致すると入力終了となる。
deliter前後にスペース等があると入力終了にならない。

※リダイレクトは下記4種
> outfile : 出力(同じファイルがあったら上書き)
< infile : 入力
>> append_file : 出力(ファイルに追記モード)
<< delimiter : heredoc
